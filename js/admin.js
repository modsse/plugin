jQuery(document).ready(function($) {
    if (steamAuthAjax.debug) {
        console.log('Steam Auth JS: –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
        console.log('jQuery –≤–µ—Ä—Å–∏—è:', $.fn.jquery);
        console.log('Select2 –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof $.fn.select2 !== 'undefined');
        console.log('steamAuthAjax:', steamAuthAjax);
    }

    let iconsData = [];
    const defaultIcons = ['fa-user', 'fa-steam', 'fa-envelope', 'fa-link', 'fa-phone', 'fa-home', 'fa-lock', 'fa-key', 'fa-cog', 'fa-circle'];
    let iconsLoaded = false;

    // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —ç–º–æ–¥–∑–∏
    const emojiList = [
        'üöÄ', '‚≠ê', 'üéâ', 'üë§', 'üåü', '‚úÖ', '‚ùå', '‚ö†Ô∏è', 'üî•', 'üí°',
        'üì¢', 'üîî', 'üéÆ', 'üèÜ', 'üéØ', 'üíæ', 'üîí', 'üîì', 'üì©', 'üìÖ',
        'üòÄ', 'üòÇ', 'üòç', 'üò¢', 'üò°', 'üëç', 'üëé', 'üôå', 'üëÄ', '‚ú®',
        '‚ö°', 'üåà', '‚òÄÔ∏è', 'üåô', '‚≠ê', 'üåç', 'üíª', 'üì±', 'üéß', 'üì∏',
        'üçï', 'üçî', 'üçü', 'üçé', 'üçâ', '‚òï', 'üç∫', 'üç∑', 'üéÅ', 'üéà',
        'üèÉ', 'üö¥', 'üèãÔ∏è', '‚öΩ', 'üèÄ', 'üé∏', 'üéπ', 'üé§', 'üé¨', 'üé®'
    ];

    const embedTemplates = {
        success: {
            color: '3066993',
            fields: {
                title: true,
                title_emoji: '‚úÖ',
                description: true,
                description_emoji: 'üéâ',
                timestamp: true,
                footer: true,
                footer_icon: 'https://steamcdn-a.akamaihd.net/steamcommunity/public/images/steamworks_docs/english/sits_small.png',
                footer_emoji: 'üåü',
                author: true,
                author_icon: steamAuthAjax.home_url + '/favicon.ico',
                author_emoji: 'üë§',
                custom: []
            }
        },
        error: {
            color: '15548997',
            fields: {
                title: true,
                title_emoji: '‚ùå',
                description: true,
                description_emoji: '‚ö†Ô∏è',
                timestamp: true,
                footer: true,
                footer_icon: 'https://steamcdn-a.akamaihd.net/steamcommunity/public/images/steamworks_docs/english/sits_small.png',
                footer_emoji: 'üî•',
                author: true,
                author_icon: steamAuthAjax.home_url + '/favicon.ico',
                author_emoji: 'üë§',
                custom: []
            }
        },
        warning: {
            color: '16776960',
            fields: {
                title: true,
                title_emoji: '‚ö†Ô∏è',
                description: true,
                description_emoji: 'üì¢',
                timestamp: true,
                footer: true,
                footer_icon: 'https://steamcdn-a.akamaihd.net/steamcommunity/public/images/steamworks_docs/english/sits_small.png',
                footer_emoji: 'üîî',
                author: true,
                author_icon: steamAuthAjax.home_url + '/favicon.ico',
                author_emoji: 'üë§',
                custom: []
            }
        },
        info: {
            color: '3447003',
            fields: {
                title: true,
                title_emoji: '‚ÑπÔ∏è',
                description: true,
                description_emoji: 'üì©',
                timestamp: true,
                footer: true,
                footer_icon: 'https://steamcdn-a.akamaihd.net/steamcommunity/public/images/steamworks_docs/english/sits_small.png',
                footer_emoji: 'üí°',
                author: true,
                author_icon: steamAuthAjax.home_url + '/favicon.ico',
                author_emoji: 'üë§',
                custom: []
            }
        }
    };

    let customTemplates = steamAuthAjax.customTemplates || {};

    $(document).on('change', '#discord_embed_template', function() {
        const template = $(this).val();
        if (steamAuthAjax.debug) console.log('–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω:', template);
        if (!template) return;

        let settings;
        if (template.startsWith('custom_')) {
            const customKey = template.replace('custom_', '');
            settings = customTemplates[customKey];
        } else {
            settings = embedTemplates[template];
        }
        if (!settings) return;

        const form = $('#discord-notifications-form');
        $('#discord_embed_color').val(settings.color);
        $('#discord_embed_color_hex').val('#' + parseInt(settings.color).toString(16).padStart(6, '0'));
        form.find('input[name="discord_embed_fields[title]"]').prop('checked', settings.fields.title);
        form.find('input[name="discord_embed_fields[title_emoji]"]').val(settings.fields.title_emoji);
        form.find('input[name="discord_embed_fields[description]"]').prop('checked', settings.fields.description);
        form.find('input[name="discord_embed_fields[description_emoji]"]').val(settings.fields.description_emoji);
        form.find('input[name="discord_embed_fields[timestamp]"]').prop('checked', settings.fields.timestamp);
        form.find('input[name="discord_embed_fields[footer]"]').prop('checked', settings.fields.footer);
        form.find('input[name="discord_embed_fields[footer_icon]"]').val(settings.fields.footer_icon);
        form.find('input[name="discord_embed_fields[footer_emoji]"]').val(settings.fields.footer_emoji);
        form.find('input[name="discord_embed_fields[author]"]').prop('checked', settings.fields.author);
        form.find('input[name="discord_embed_fields[author_icon]"]').val(settings.fields.author_icon);
        form.find('input[name="discord_embed_fields[author_emoji]"]').val(settings.fields.author_emoji);

        $('#custom-embed-fields').empty();
        settings.fields.custom.forEach((field, index) => {
            const fieldHtml = `
                <div class="custom-field" data-index="${index}">
                    <input type="text" name="discord_embed_fields[custom][${index}][name]" value="${field.name || ''}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è">
                    <input type="text" name="discord_embed_fields[custom][${index}][value]" value="${field.value || ''}" placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ">
                    <input type="text" name="discord_embed_fields[custom][${index}][emoji]" value="${field.emoji || ''}" placeholder="–≠–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä., üåü)" class="emoji-input">
                    <button type="button" class="emoji-picker button" data-target="custom[${index}][emoji]">üôÇ</button>
                    <button type="button" class="remove-custom-field button">–£–¥–∞–ª–∏—Ç—å</button>
                </div>`;
            $('#custom-embed-fields').prepend(fieldHtml);
        });

        $('#discord-embed-preview').trigger('click');
    });

    $(document).on('click', '#save-custom-template', function(e) {
        e.preventDefault();
        const templateName = $('#custom_template_name').val().trim();
        if (!templateName) {
            showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞', 'error');
            return;
        }
    
        const form = $('#discord-notifications-form');
        const color = form.find('#discord_embed_color').val() || '3447003';
        const fields = {
            title: form.find('input[name="discord_embed_fields[title]"]').is(':checked'),
            title_emoji: form.find('input[name="discord_embed_fields[title_emoji]"]').val(),
            description: form.find('input[name="discord_embed_fields[description]"]').is(':checked'),
            description_emoji: form.find('input[name="discord_embed_fields[description_emoji]"]').val(),
            timestamp: form.find('input[name="discord_embed_fields[timestamp]"]').is(':checked'),
            footer: form.find('input[name="discord_embed_fields[footer]"]').is(':checked'),
            footer_icon: form.find('input[name="discord_embed_fields[footer_icon]"]').val(),
            footer_emoji: form.find('input[name="discord_embed_fields[footer_emoji]"]').val(),
            author: form.find('input[name="discord_embed_fields[author]"]').is(':checked'),
            author_icon: form.find('input[name="discord_embed_fields[author_icon]"]').val(),
            author_emoji: form.find('input[name="discord_embed_fields[author_emoji]"]').val(),
            custom: []
        };
    
        form.find('.custom-field').each(function() {
            const name = $(this).find('input[name*="[name]"]').val();
            const value = $(this).find('input[name*="[value]"]').val();
            const emoji = $(this).find('input[name*="[emoji]"]').val();
            if (name && value) {
                fields.custom.push({ name: name, value: value, emoji: emoji });
            }
        });
    
        const templateData = {
            name: templateName,
            color: color,
            fields: fields
        };
    
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'steam_auth_save_custom_template',
                nonce: steamAuthAjax.nonce,
                template: JSON.stringify(templateData)
            },
            success: function(response) {
                if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                if (response.success) {
                    customTemplates[response.data.key] = templateData;
                    const optionHtml = `
                        <div class="template-option" data-key="custom_${response.data.key}">
                            <select-option value="custom_${response.data.key}">${templateName}</select-option>
                            <button type="button" class="remove-custom-template button" data-key="${response.data.key}">–£–¥–∞–ª–∏—Ç—å</button>
                        </div>`;
                    $('#discord_embed_template').append(`<option value="custom_${response.data.key}">${templateName}</option>`);
                    $('#custom-template-list').append(optionHtml);
                    $('#custom_template_name').val('');
                    showNotification('–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω', 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
            }
        });
    });

    function loadIcons(callback) {
        if (iconsLoaded) {
            if (steamAuthAjax.debug) console.log('–ò–∫–æ–Ω–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', iconsData);
            callback();
            return;
        }

        if (steamAuthAjax.debug) console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ icons.json');
        $.getJSON('https://semods.art/wp-content/plugins/steam-auth/icons.json', function(data) {
            if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç –æ—Ç icons.json:', data);
            if (data && typeof data === 'object' && !Array.isArray(data)) {
                iconsData = Object.keys(data).map(key => {
                    const style = data[key].styles[0];
                    const prefix = style === 'brands' ? 'fab' : 'fas';
                    return { id: `fa-${key}`, prefix: prefix, text: `fa-${key}` };
                });
                if (steamAuthAjax.debug) console.log('–ò–∫–æ–Ω–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞:', iconsData.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤', iconsData.slice(0, 10));
            } else if (Array.isArray(data) && data.length > 0) {
                iconsData = data.map(icon => ({ id: icon, prefix: 'fas', text: icon }));
                if (steamAuthAjax.debug) console.log('–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∫–æ–Ω–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω:', iconsData.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤', iconsData.slice(0, 10));
            } else {
                iconsData = defaultIcons.map(icon => ({ id: icon, prefix: 'fas', text: icon }));
                if (steamAuthAjax.debug) console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ icons.json –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–π —Å–ø–∏—Å–æ–∫:', iconsData);
            }
            iconsLoaded = true;
            callback();
        }).fail(function(xhr, status, error) {
            iconsData = defaultIcons.map(icon => ({ id: icon, prefix: 'fas', text: icon }));
            if (steamAuthAjax.debug) console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ icons.json:', status, error, '–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–π —Å–ø–∏—Å–æ–∫:', iconsData);
            iconsLoaded = true;
            callback();
        });
    }

    function initIconSelect() {
        if (steamAuthAjax.debug) console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Select2 –¥–ª—è', $('.icon-select').length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        if (!Array.isArray(iconsData) || iconsData.length === 0) {
            if (steamAuthAjax.debug) console.error('iconsData –Ω–µ –º–∞—Å—Å–∏–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π:', iconsData);
            iconsData = defaultIcons.map(icon => ({ id: icon, prefix: 'fas', text: icon }));
        }
        $('.icon-select').each(function() {
            const $select = $(this);
            if ($select.hasClass('select2-hidden-accessible')) {
                $select.select2('destroy');
            }
            $select.select2({
                width: '100%',
                placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É',
                allowClear: true,
                templateResult: formatIcon,
                templateSelection: formatIcon,
                data: iconsData,
                matcher: function(params, data) {
                    if (!params.term || params.term.trim() === '') return data;
                    if (data.text.toLowerCase().indexOf(params.term.toLowerCase()) > -1) return data;
                    return null;
                }
            });
            const selected = $select.data('selected');
            if (selected) {
                if (steamAuthAjax.debug) console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è', selected, '–¥–ª—è', $select.attr('name'));
                $select.val(selected).trigger('change');
            }
        });
    }

    function formatIcon(state) {
        if (!state.id) return state.text;
        const prefix = state.prefix || 'fas';
        return $(`<span><i class="${prefix} ${state.id}"></i> ${state.text}</span>`);
    }

    function showNotification(message, type) {
        const $notice = $(`<div class="notice notice-${type} is-dismissible"><p>${message}</p></div>`);
        $('.wrap').prepend($notice);
        setTimeout(() => $notice.fadeOut(500, () => $notice.remove()), 5000);
    }

    $(document).on('submit', '#steam-send-message-form', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã #steam-send-message-form');
        const $form = $(this);
        const $submitButton = $form.find('input[type="submit"]');
        const $saveSpinner = $('#save-spinner'); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–ø–∏–Ω–Ω–µ—Ä –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è save-spinner

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        $saveSpinner.show();
        $submitButton.prop('disabled', true);

        const formData = $form.serialize();
        const data = formData + '&action=steam_auth_send_message&nonce=' + steamAuthAjax.nonce;
        if (steamAuthAjax.debug) console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', data);

        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: data,
            success: function(response) {
                if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                if (response.success) {
                    showNotification(response.data, 'success');
                    $('#message_title').val('');
                    $('#message_content').val('');
                    $('#user_id').val('0');
                    $('#role').val('');
                    $('#discord_embed_template').val('');
                    loadTab('messages'); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                showNotification('–û—à–∏–±–∫–∞ AJAX: ' + error, 'error');
            },
            complete: function() {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                $saveSpinner.hide();
                $submitButton.prop('disabled', false);
            }
        });
    });

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    $(document).on('click', '.tablenav-pages a', function(e) {
        e.preventDefault();
        const href = $(this).attr('href');
        loadTab('messages', href); // –ü–µ—Ä–µ–¥–∞—ë–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º paged
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    $(document).on('change', '#message-category', function() {
        if ($(this).val() === 'new_category') {
            $('#new-category-field').show();
        } else {
            $('#new-category-field').hide();
        }
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    $(document).on('click', '#add-new-category', function() {
        const newCategory = $('#new-category-input').val().trim();
        if (!newCategory) {
            showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'error');
            return;
        }

        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'steam_auth_add_category',
                category: newCategory,
                nonce: steamAuthAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    $('#message-category').append(`<option value="${newCategory}">${newCategory.charAt(0).toUpperCase() + newCategory.slice(1)}</option>`);
                    $('#message-category').val(newCategory);
                    $('#new-category-field').hide();
                    $('#new-category-input').val('');
                    $('#category-list').append(`
                        <tr data-category="${newCategory}">
                            <td>${newCategory.charAt(0).toUpperCase() + newCategory.slice(1)}</td>
                            <td>
                                <a href="#" class="edit-category" data-category="${newCategory}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a> |
                                <a href="#" class="delete-category" data-category="${newCategory}">–£–¥–∞–ª–∏—Ç—å</a>
                            </td>
                        </tr>
                    `);
                    showNotification('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
            }
        });
    });

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    $(document).on('click', '.edit-category', function(e) {
        e.preventDefault();
        const oldCategory = $(this).data('category');
        const newCategory = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', oldCategory);
        if (!newCategory || newCategory === oldCategory) return;

        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'steam_auth_edit_category',
                old_category: oldCategory,
                new_category: newCategory,
                nonce: steamAuthAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    $(`tr[data-category="${oldCategory}"]`).replaceWith(`
                        <tr data-category="${newCategory}">
                            <td>${newCategory.charAt(0).toUpperCase() + newCategory.slice(1)}</td>
                            <td>
                                <a href="#" class="edit-category" data-category="${newCategory}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a> |
                                <a href="#" class="delete-category" data-category="${newCategory}">–£–¥–∞–ª–∏—Ç—å</a>
                            </td>
                        </tr>
                    `);
                    $(`#message-category option[value="${oldCategory}"]`).replaceWith(`<option value="${newCategory}">${newCategory.charAt(0).toUpperCase() + newCategory.slice(1)}</option>`);
                    showNotification('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
            }
        });
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    $(document).on('click', '.delete-category', function(e) {
        e.preventDefault();
        const category = $(this).data('category');
        showConfirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "' + category + '"? –°–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ "general".', function(confirmed) {
            if (confirmed) {
                $.ajax({
                    url: steamAuthAjax.ajaxurl,
                    type: 'POST',
                    data: {
                        action: 'steam_auth_delete_category',
                        category: category,
                        nonce: steamAuthAjax.nonce
                    },
                    success: function(response) {
                        if (response.success) {
                            $(`tr[data-category="${category}"]`).remove();
                            $(`#message-category option[value="${category}"]`).remove();
                            showNotification('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞', 'success');
                        } else {
                            showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                        showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
                    }
                });
            }
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    $(document).on('change', '#select-all-messages', function() {
        if (steamAuthAjax.debug) console.log('–ß–µ–∫–±–æ–∫—Å "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –∏–∑–º–µ–Ω—ë–Ω:', this.checked);
        $('.message-checkbox').prop('checked', this.checked);
        toggleBulkDeleteButton();
    });

    $(document).on('change', '.message-checkbox', function() {
        if (steamAuthAjax.debug) console.log('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —á–µ–∫–±–æ–∫—Å –∏–∑–º–µ–Ω—ë–Ω:', this.value, this.checked);
        toggleBulkDeleteButton();
        if (!this.checked) $('#select-all-messages').prop('checked', false);
    });

    $(document).on('click', '.delete-message', function(e) {
        e.preventDefault();
        const messageId = $(this).data('message-id');
        if (steamAuthAjax.debug) console.log('–£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageId);
        showConfirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?', function(confirmed) {
            if (confirmed) deleteMessages([messageId]);
        });
    });

    $(document).on('click', '#bulk-delete-messages', function(e) {
        e.preventDefault();
        const selectedIds = $('.message-checkbox:checked').map(function() {
            return $(this).val();
        }).get();
        if (steamAuthAjax.debug) console.log('–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ, –≤—ã–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', selectedIds);
        if (selectedIds.length > 0) {
            showConfirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è?', function(confirmed) {
                if (confirmed) deleteMessages(selectedIds);
            });
        }
    });

    function toggleBulkDeleteButton() {
        const checkedCount = $('.message-checkbox:checked').length;
        if (steamAuthAjax.debug) console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è, –≤—ã–±—Ä–∞–Ω–æ:', checkedCount);
        $('#bulk-delete-messages').prop('disabled', checkedCount === 0);
    }

    function deleteMessages(messageIds) {
        if (steamAuthAjax.debug) console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', messageIds);
        $.post(steamAuthAjax.ajaxurl, {
            action: 'steam_auth_bulk_delete_messages',
            message_ids: messageIds,
            nonce: steamAuthAjax.nonce
        }, function(response) {
            if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ:', response);
            if (response.success) {
                showNotification('–°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã', 'success');
                loadTab('messages'); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∫–ª–∞–¥–∫—É
            } else {
                showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
            }
        }).fail(function(xhr, status, error) {
            console.error('–û—à–∏–±–∫–∞ AJAX –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', status, error);
            showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
        });
    }

    $(document).on('submit', '#general-form', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã #general-form');
        const $form = $(this);
        const $submitButton = $form.find('input[type="submit"]');
        const $saveSpinner = $('#save-spinner'); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –µ–¥–∏–Ω—ã–π ID —Å–ø–∏–Ω–Ω–µ—Ä–∞

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        $saveSpinner.show();
        $submitButton.prop('disabled', true);

        const data = $form.serialize() + '&action=steam_auth_save_settings&general=1';
        if (steamAuthAjax.debug) console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', data);
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: data,
            success: function(response) {
                if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                if (response.success) {
                    showNotification(response.data.message, 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
            },
            complete: function() {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                $saveSpinner.hide();
                $submitButton.prop('disabled', false);
            }
        });
    });

    $(document).on('submit', '#profile-form', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã #profile-form');
        const $form = $(this);
        const $submitButton = $form.find('input[type="submit"]');
        const $saveSpinner = $('#save-spinner'); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –µ–¥–∏–Ω—ã–π ID —Å–ø–∏–Ω–Ω–µ—Ä–∞

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        $saveSpinner.show();
        $submitButton.prop('disabled', true);

        const data = $form.serialize() + '&action=steam_auth_save_settings&profile=1';
        if (steamAuthAjax.debug) console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', data);
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: data,
            success: function(response) {
                if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                if (response.success) {
                    showNotification(response.data.message, 'success');
                    $.post(steamAuthAjax.ajaxurl, { action: 'steam_auth_admin_load_tab', tab: 'profile' }, function(response) {
                        $('#tab-content').html(response);
                        loadIcons(function() {
                            initIconSelect();
                        });
                    });
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
            },
            complete: function() {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                $saveSpinner.hide();
                $submitButton.prop('disabled', false);
            }
        });
    });

    $(document).on('submit', '#discord-notifications-form', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã #discord-notifications-form');
        const $form = $(this);
        const $submitButton = $form.find('input[type="submit"]');
        const $saveSpinner = $('#save-spinner');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        $saveSpinner.show();
        $submitButton.prop('disabled', true);

        const data = $form.serialize() + '&action=steam_auth_save_settings&discord-notifications=1';
        if (steamAuthAjax.debug) console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', data);
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: data,
            success: function(response) {
                if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                if (response.success) {
                    showNotification(response.data.message, 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
            },
            complete: function() {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                $saveSpinner.hide();
                $submitButton.prop('disabled', false);
            }
        });
    });

    $(document).on('submit', '#steam-auth-mods-form', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã #steam-auth-mods-form');
        const $form = $(this);
        const $submitButton = $form.find('input[type="submit"]');
        const $saveSpinner = $('#save-spinner'); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –µ–¥–∏–Ω—ã–π ID —Å–ø–∏–Ω–Ω–µ—Ä–∞

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        $saveSpinner.show();
        $submitButton.prop('disabled', true);

        const formData = $form.serializeArray(); // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
        formData.push({ name: 'action', value: 'steam_auth_save_settings' });
        formData.push({ name: 'tab', value: 'mods' });
        formData.push({ name: 'nonce', value: steamAuthAjax.nonce });
        if (steamAuthAjax.debug) console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', formData);
    
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: formData,
            success: function(response) {
                if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                if (response.success) {
                    showNotification(response.data.message, 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                showNotification('–û—à–∏–±–∫–∞ AJAX: ' + error, 'error');
            },
            complete: function() {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                $saveSpinner.hide();
                $submitButton.prop('disabled', false);
            }
        });
    });

    $(document).on('submit', '#steam-messages-settings-form', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã #steam-messages-settings-form');
    
        const $form = $(this);
        const $submitButton = $form.find('input[type="submit"]');
        const $saveSpinner = $('#settings-spinner'); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ HTML
    
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        $saveSpinner.show();
        $submitButton.prop('disabled', true);
    
        const formData = $form.serialize();
        const data = formData + '&action=steam_auth_save_messages_settings';
        if (steamAuthAjax.debug) console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', data);
    
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: data,
            success: function(response) {
                if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                if (response.success) {
                    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + (response.data || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error, xhr.responseText);
                showNotification('–û—à–∏–±–∫–∞ AJAX: ' + xhr.responseText, 'error');
            },
            complete: function() {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                $saveSpinner.hide();
                $submitButton.prop('disabled', false);
            }
        });
    });




    $(document).on('change', '#discord_embed_color_hex', function() {
        const hex = $(this).val().replace('#', '');
        const decimal = parseInt(hex, 16);
        $('#discord_embed_color').val(decimal);
        if (steamAuthAjax.debug) console.log(`–¶–≤–µ—Ç –∏–∑–º–µ–Ω—ë–Ω: HEX ${hex} -> Decimal ${decimal}`);
        $('#discord-embed-preview').trigger('click');
    });

    $(document).on('click', '#discord-embed-preview', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"');

        const form = $('#discord-notifications-form');
        const color = form.find('#discord_embed_color').val() || '3447003';
        const fields = {
            title: form.find('input[name="discord_embed_fields[title]"]').is(':checked'),
            title_emoji: form.find('input[name="discord_embed_fields[title_emoji]"]').val(),
            description: form.find('input[name="discord_embed_fields[description]"]').is(':checked'),
            description_emoji: form.find('input[name="discord_embed_fields[description_emoji]"]').val(),
            timestamp: form.find('input[name="discord_embed_fields[timestamp]"]').is(':checked'),
            footer: form.find('input[name="discord_embed_fields[footer]"]').is(':checked'),
            footer_icon: form.find('input[name="discord_embed_fields[footer_icon]"]').val(),
            footer_emoji: form.find('input[name="discord_embed_fields[footer_emoji]"]').val(),
            author: form.find('input[name="discord_embed_fields[author]"]').is(':checked'),
            author_icon: form.find('input[name="discord_embed_fields[author_icon]"]').val(),
            author_emoji: form.find('input[name="discord_embed_fields[author_emoji]"]').val(),
            custom: []
        };

        form.find('.custom-field').each(function() {
            const name = $(this).find('input[name*="[name]"]').val();
            const value = $(this).find('input[name*="[value]"]').val();
            const emoji = $(this).find('input[name*="[emoji]"]').val();
            if (name && value) {
                fields.custom.push({ name: name, value: value, emoji: emoji });
            }
        });

        const previewContent = $('#discord-embed-preview-content');
        let html = '';

        const hexColor = '#' + parseInt(color).toString(16).padStart(6, '0');
        html += `<div class="embed-color-bar" style="background-color: ${hexColor};"></div>`;
        html += '<div class="embed-inner">';

        if (fields.author) {
            html += '<div class="embed-author">';
            if (fields.author_icon) {
                html += `<img src="${fields.author_icon}" alt="Author Icon"> `;
            }
            html += `<span>${fields.author_emoji || ''} ${$('body').hasClass('wp-admin') ? 'Admin' : 'Steam Auth'}</span>`;
            html += '</div>';
        }

        if (fields.title) {
            html += `<div class="embed-title">${fields.title_emoji || ''} –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</div>`;
        }

        if (fields.description) {
            html += `<div class="embed-description">${fields.description_emoji || ''} –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.</div>`;
        }

        if (fields.custom.length > 0) {
            html += '<div class="embed-custom-fields">';
            fields.custom.forEach(field => {
                html += `<div class="embed-field">${field.emoji || ''} <strong>${field.name}</strong><br>${field.value}</div>`;
            });
            html += '</div>';
        }

        if (fields.timestamp) {
            const now = new Date().toISOString().replace('T', ' ').substring(0, 19);
            html += `<div class="embed-timestamp">${now}</div>`;
        }

        if (fields.footer) {
            html += '<div class="embed-footer">';
            if (fields.footer_icon) {
                html += `<img src="${fields.footer_icon}" alt="Footer Icon"> `;
            }
            html += `<span>${fields.footer_emoji || ''} Steam Auth Notification</span>`;
            html += '</div>';
        }

        html += '</div>';
        previewContent.html(html);
        $('#discord-embed-preview-container').show();

        if (steamAuthAjax.debug) console.log('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:', html);
    });

    $(document).on('click', '#discord-embed-preview-close', function() {
        $('#discord-embed-preview-container').hide();
    });

    $(document).on('click', '#add-custom-field', function() {
        const index = Date.now();
        const field = `
            <div class="custom-field" data-index="${index}">
                <input type="text" name="discord_embed_fields[custom][${index}][name]" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è">
                <input type="text" name="discord_embed_fields[custom][${index}][value]" placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ">
                <input type="text" name="discord_embed_fields[custom][${index}][emoji]" placeholder="–≠–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä., üåü)" class="emoji-input">
                <button type="button" class="emoji-picker button" data-target="custom[${index}][emoji]">üôÇ</button>
                <button type="button" class="remove-custom-field button">–£–¥–∞–ª–∏—Ç—å</button>
            </div>`;
        $('#custom-embed-fields').prepend(field);
        $('#discord-embed-preview').trigger('click');
    });

    $(document).on('click', '.remove-custom-field', function() {
        $(this).parent('.custom-field').remove();
        $('#discord-embed-preview').trigger('click');
    });

    $(document).on('input', '.emoji-input', function() {
        $('#discord-embed-preview').trigger('click');
    });

    $(document).on('click', '.emoji-picker', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏');
        const target = $(this).data('target');
        const $modal = $('#emoji-picker-modal');
        const $list = $('#emoji-list');
        $list.empty();
        emojiList.forEach(emoji => {
            $list.append(`<span class="emoji-option" style="cursor: pointer; font-size: 24px; margin: 5px;" data-emoji="${emoji}">${emoji}</span>`);
        });
        $('#emoji-picker-overlay').css('display', 'block');
        $modal.css('display', 'block').data('target', target);
    });

    $(document).on('click', '.emoji-option', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏');
        const emoji = $(this).data('emoji');
        const target = $('#emoji-picker-modal').data('target');
        let $input;

        if (target.includes('custom')) {
            const match = target.match(/custom\[(\d+)\]\[emoji\]/);
            if (match && match[1]) {
                const index = match[1];
                $input = $(`input[name="discord_embed_fields[custom][${index}][emoji]"]`);
            } else {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω–¥–µ–∫—Å –∏–∑ target:', target);
            }
        } else {
            $input = $(`input[name="discord_embed_fields[${target}]"]`);
        }

        if ($input.length) {
            $input.val(emoji);
            $('#emoji-picker-modal').css('display', 'none');
            $('#emoji-picker-overlay').css('display', 'none');
            $('#discord-embed-preview').trigger('click');
        } else {
            console.error('–¶–µ–ª–µ–≤–æ–π input –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è:', target);
        }
    });

    $(document).on('click', '#emoji-picker-close, #emoji-picker-overlay', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–ö–ª–∏–∫ –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
        $('#emoji-picker-modal').css('display', 'none');
        $('#emoji-picker-overlay').css('display', 'none');
    });

    $(document).on('click', '#discord-embed-test', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–ö–ª–∏–∫ –ø–æ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ"');
        const $button = $(this);
        const $testSpinner = $('#test-spinner');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        $testSpinner.show();
        $button.prop('disabled', true);

        const data = $('#discord-notifications-form').serialize() + '&action=steam_auth_test_discord_embed';
        $.post(steamAuthAjax.ajaxurl, data, function(response) {
            if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', response);
            showNotification(response.success ? '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!' : '–û—à–∏–±–∫–∞: ' + response.data, response.success ? 'success' : 'error');
        }).fail(function(xhr, status, error) {
            console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
            showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
        }).always(function() {
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            $testSpinner.hide();
            $button.prop('disabled', false);
        });
    });

    $(document).on('steam_auth_tab_loaded', function(e, tab) {
        if (tab === 'profile') {
            loadIcons(function() {
                initIconSelect();
            });
        }
    });

    $(document).on('click', '#add-custom-field', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ"');
        const tbody = $('#custom-fields tbody');
        const fieldCount = tbody.find('tr').length; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á—ë—Ç—á–∏–∫ –≤–º–µ—Å—Ç–æ timestamp –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        const tempKey = `new_field_${fieldCount}`; // –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á
        const row = `
            <tr data-field-key="${tempKey}">
                <td><input type="text" name="custom_fields[${tempKey}][name]" value="" placeholder="–ò–º—è –ø–æ–ª—è" required></td>
                <td><input type="text" name="custom_fields[${tempKey}][label]" value="" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"></td>
                <td>
                    <select name="custom_fields[${tempKey}][type]">
                        <option value="text">–¢–µ–∫—Å—Ç</option>
                        <option value="email">Email</option>
                        <option value="number">–ß–∏—Å–ª–æ</option>
                        <option value="textarea">–¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å</option>
                    </select>
                </td>
                <td><input type="checkbox" name="custom_fields[${tempKey}][visible]"></td>
                <td><input type="checkbox" name="custom_fields[${tempKey}][editable]"></td>
                <td>
                    <select name="custom_fields[${tempKey}][icon]" class="icon-select" data-selected="">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É</option>
                    </select>
                </td>
                <td><button type="button" class="remove-field">–£–¥–∞–ª–∏—Ç—å</button></td>
            </tr>`;
        tbody.append(row);
        loadIcons(function() {
            initIconSelect();
        });
    });

    $(document).on('click', '.remove-field', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–£–¥–∞–ª–∏—Ç—å"');
        const $row = $(this).closest('tr');
        const fieldKey = $row.data('field-key');
    
        if (fieldKey && !fieldKey.startsWith('new_')) {
            $.ajax({
                url: steamAuthAjax.ajaxurl,
                type: 'POST',
                data: {
                    action: 'steam_auth_remove_field',
                    nonce: steamAuthAjax.nonce,
                    field_key: fieldKey
                },
                success: function(response) {
                    if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                    if (response.success) {
                        $row.remove();
                        showNotification('–ü–æ–ª–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
                    } else {
                        showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                    showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
                }
            });
        } else {
            $row.remove();
            showNotification('–ù–æ–≤–æ–µ –ø–æ–ª–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ñ–æ—Ä–º—ã', 'info');
        }
    });

    $(document).ajaxSuccess(function(event, xhr, settings) {
        if (typeof settings.data === 'string' && settings.data.indexOf('action=steam_auth_admin_load_tab') !== -1) {
            const tabMatch = settings.data.match(/tab=([^&]+)/);
            if (tabMatch && tabMatch[1]) {
                const tab = tabMatch[1];
                $(document).trigger('steam_auth_tab_loaded', [tab]);
            }
        }
    });

    if ($('#general-form').length) {
        loadIcons(function() {
            if (steamAuthAjax.debug) console.log('–ò–∫–æ–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è general, –Ω–æ Select2 –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        });
    }

    function showConfirmModal(message, callback) {
        const modal = document.getElementById('steam-confirm-modal');
        const messageEl = document.getElementById('steam-confirm-message');
        const yesBtn = document.getElementById('steam-confirm-yes');
        const noBtn = document.getElementById('steam-confirm-no');

        if (!modal) {
            console.error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DOM');
            return;
        }

        messageEl.textContent = message;
        modal.style.display = 'flex';

        yesBtn.onclick = function() {
            modal.style.display = 'none';
            callback(true);
        };
        noBtn.onclick = function() {
            modal.style.display = 'none';
            callback(false);
        };
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è .tab-link
    $(document).on('click', '.tab-link', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–ö–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ .tab-link:', $(this).data('tab'));
    
        var tabId = $(this).data('tab');
    
        $('.tab-link').removeClass('active');
        $('.tab-content').removeClass('active');
    
        $(this).addClass('active');
        $('#' + tabId).addClass('active');
    
        if (steamAuthAjax.debug) console.log('–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞:', tabId);
    });

    const tabs = document.querySelectorAll('.nav-tab');
    const content = document.getElementById('tab-content');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadTab –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    function loadTab(tab, url = null) {
        if (steamAuthAjax.debug) console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –∞–¥–º–∏–Ω–∫–∏:', tab, 'URL:', url);
        const $tabContent = $('#tab-content');
        $tabContent.html('<span class="loading-spinner"></span> –ó–∞–≥—Ä—É–∑–∫–∞...');
    
        const data = {
            action: 'steam_auth_admin_load_tab',
            tab: tab,
            nonce: steamAuthAjax.nonce
        };
    
        $.post(url || steamAuthAjax.ajaxurl, data, function(response) {
            $tabContent.html(response);
            $(document).trigger('steam_auth_tab_loaded', [tab]);
            if (tab === 'tickets') {
                initTicketActions();
            }
        }).fail(function(xhr, status, error) {
            console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
            $tabContent.html('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏');
        });
    }

    tabs.forEach(tab => {
        tab.addEventListener('click', function(e) {
            e.preventDefault();
            if (steamAuthAjax.debug) console.log('–ö–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ .nav-tab:', this.dataset.tab);
            tabs.forEach(t => t.classList.remove('nav-tab-active'));
            this.classList.add('nav-tab-active');
            loadTab(this.dataset.tab);
        });
    });

    $(document).on('click', '.steam-approve-unlink-discord', function() {
        const userId = $(this).data('user-id');
        showConfirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å –æ—Ç–≤—è–∑–∫—É Discord –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?', function(confirmed) {
            if (confirmed) {
                if (steamAuthAjax.debug) console.log('–ü–æ–ø—ã—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–≤—è–∑–∫–∏ Discord –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
                $.post(steamAuthAjax.ajaxurl, {
                    action: 'steam_auth_approve_unlink_discord',
                    user_id: userId,
                    nonce: steamAuthAjax.nonce
                }, function(response) {
                    if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                    if (response.success) {
                        showNotification(response.data, 'success');
                        loadTab('discord-unlink');
                    } else {
                        showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                    }
                }).fail(function(xhr, status, error) {
                    console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                    showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
                });
            }
        });
    });

    $(document).on('click', '.steam-reject-unlink-discord', function() {
        const userId = $(this).data('user-id');
        showConfirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤—è–∑–∫—É Discord?', function(confirmed) {
            if (confirmed) {
                if (steamAuthAjax.debug) console.log('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–≤—è–∑–∫–∏ Discord –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
                $.post(steamAuthAjax.ajaxurl, {
                    action: 'steam_auth_reject_unlink_discord',
                    user_id: userId,
                    nonce: steamAuthAjax.nonce
                }, function(response) {
                    if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                    if (response.success) {
                        showNotification(response.data, 'success');
                        loadTab('discord-unlink');
                    } else {
                        showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                    }
                }).fail(function(xhr, status, error) {
                    console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                    showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
                });
            }
        });
    });

    if (typeof steamAuthAjax === 'undefined') {
        console.error('steamAuthAjax –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω');
    } else {
        console.log('steamAuthAjax –æ–ø—Ä–µ–¥–µ–ª—ë–Ω:', steamAuthAjax);
    }

    $(document).on('click', '.remove-custom-template', function(e) {
        e.preventDefault();
        const templateKey = $(this).data('key');
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'steam_auth_remove_custom_template',
                nonce: steamAuthAjax.nonce,
                key: templateKey
            },
            success: function(response) {
                if (response.success) {
                    delete customTemplates[templateKey];
                    $(`#discord_embed_template option[value="custom_${templateKey}"]`).remove();
                    $(`.template-option[data-key="custom_${templateKey}"]`).remove();
                    showNotification('–®–∞–±–ª–æ–Ω —É–¥–∞–ª—ë–Ω', 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
            }
        });
    });

    $(document).on('click', '.upload-image-button', function(e) {
        e.preventDefault();
        const button = $(this);
        const imageField = button.siblings('.image-url');
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞—Ç–µ–∫–∏ WordPress
        if (typeof wp === 'undefined' || !wp.media) {
            alert('–ú–µ–¥–∏–∞—Ç–µ–∫–∞ WordPress –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω–∫–µ WordPress.');
            return;
        }
    
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–¥–∏–∞—Ç–µ–∫—É
        const mediaFrame = wp.media({
            title: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–∞',
            button: { text: '–í—ã–±—Ä–∞—Ç—å' },
            multiple: false,
            library: { type: 'image' } // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        });
    
        // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        mediaFrame.on('select', function() {
            const attachment = mediaFrame.state().get('selection').first().toJSON();
            imageField.val(attachment.url);
        });
    
        mediaFrame.open();
    });

    $(document).on('click', '.remove-general-field', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–£–¥–∞–ª–∏—Ç—å –æ–±—â–µ–µ –ø–æ–ª–µ"');
        const $row = $(this).closest('tr');
        const fieldKey = $row.data('field-key');
    
        showConfirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—â–µ–µ –ø–æ–ª–µ?', function(confirmed) {
            if (confirmed) {
                $.ajax({
                    url: steamAuthAjax.ajaxurl,
                    type: 'POST',
                    data: {
                        action: 'steam_auth_remove_general_field',
                        nonce: steamAuthAjax.nonce,
                        field_key: fieldKey
                    },
                    success: function(response) {
                        if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                        if (response.success) {
                            $row.remove();
                            showNotification(response.data, 'success');
                        } else {
                            showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                        showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
                    }
                });
            }
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
    $(document).on('click', '#clear-logs', function(e) {
        e.preventDefault();
        var $button = $(this);
        if (steamAuthAjax.debug) console.log('–ö–ª–∏–∫ –ø–æ "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"');

        showConfirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏?', function(confirmed) {
            if (confirmed) {
                $button.prop('disabled', true);
                if (steamAuthAjax.debug) console.log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∫–∞ AJAX');

                $.ajax({
                    url: steamAuthAjax.ajaxurl,
                    type: 'POST',
                    data: {
                        action: 'steam_auth_clear_logs',
                        nonce: steamAuthAjax.nonce
                    },
                    success: function(response) {
                        if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                        if (response.success) {
                            $('.steam-auth-logs').html('<p>–õ–æ–≥–æ–≤ –Ω–µ—Ç.</p>');
                            $('#steam-auth-notification')
                                .removeClass('error')
                                .addClass('success')
                                .html(response.data.message || '–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã')
                                .slideDown(300)
                                .delay(3000)
                                .slideUp(300);
                        } else {
                            $('#steam-auth-notification')
                                .removeClass('success')
                                .addClass('error')
                                .html(response.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                                .slideDown(300)
                                .delay(3000)
                                .slideUp(300);
                        }
                        $button.prop('disabled', false);
                    },
                    error: function(xhr, status, error) {
                        if (steamAuthAjax.debug) console.error('–û—à–∏–±–∫–∞ AJAX:', status, error, xhr.responseText);
                        $('#steam-auth-notification')
                            .removeClass('success')
                            .addClass('error')
                            .html('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: ' + (xhr.responseText || error))
                            .slideDown(300)
                            .delay(3000)
                            .slideUp(300);
                        $button.prop('disabled', false);
                    }
                });
            } else {
                if (steamAuthAjax.debug) console.log('–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            }
        });
    });

    // –¢—ë–º–Ω–∞—è —Ç–µ–º–∞
    function applyTheme(theme) {
        const $body = $('body');
        if (theme === 'dark') {
            $body.addClass('steam-auth-dark-theme');
            $('#theme-toggle').text('–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞');
        } else {
            $body.removeClass('steam-auth-dark-theme');
            $('#theme-toggle').text('–¢—ë–º–Ω–∞—è —Ç–µ–º–∞');
        }
        localStorage.setItem('steamAuthTheme', theme);
        if (steamAuthAjax.debug) console.log('–¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:', theme);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const savedTheme = localStorage.getItem('steamAuthTheme') || 'light';
    applyTheme(savedTheme);

    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
    $(document).on('click', '#theme-toggle', function(e) {
        e.preventDefault();
        const currentTheme = localStorage.getItem('steamAuthTheme') || 'light';
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        applyTheme(newTheme);
    });

    // js/admin.js (–¥–æ–±–∞–≤–∏—Ç—å –≤ document.ready)
    $(document).on('submit', '#ticket-topics-form', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã #ticket-topics-form');
        const $spinner = $('#ticket-settings-spinner');
        $spinner.show();
    
        const formData = $(this).serialize();
        const nonce = $(this).find('[name="nonce"]').val(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è "nonce"
        if (steamAuthAjax.debug) console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData, 'Nonce:', nonce);
    
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: formData + '&action=save_ticket_topics&nonce=' + nonce,
            success: function(response) {
                $spinner.hide();
                if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                if (response.success) {
                    showNotification('–¢–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
                    loadTab('tickets');
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + (response.data || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                }
            },
            error: function(xhr, status, error) {
                $spinner.hide();
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error, xhr.responseText);
                showNotification('–û—à–∏–±–∫–∞ AJAX: ' + xhr.responseText, 'error');
            }
        });
    });

    $(document).on('click', '#add-ticket-topic', function(e) {
        e.preventDefault(); // –î–æ–±–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        if (steamAuthAjax.debug) console.log('–ö–ª–∏–∫ –ø–æ #add-ticket-topic');
        const $tbody = $('#ticket-topics-list');
        const newRow = `
            <tr>
                <td><input type="text" name="topics[new_${Date.now()}][name]"></td>
                <td><input type="text" name="topics[new_${Date.now()}][description]"></td>
                <td><input type="checkbox" name="topics[new_${Date.now()}][is_active]" checked></td>
                <td><a href="#" class="delete-topic">–£–¥–∞–ª–∏—Ç—å</a></td>
            </tr>`;
        $tbody.append(newRow);
        if (steamAuthAjax.debug) console.log('–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', newRow);
    });

    $(document).on('click', '.delete-topic', function(e) {
        e.preventDefault();
        $(this).closest('tr').remove();
    });

    $(document).on('submit', '#ticket-settings-form', function(e) {
        e.preventDefault();
        if (steamAuthAjax.debug) console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã #ticket-settings-form');
        const $spinner = $('#ticket-settings-spinner');
        $spinner.show();
    
        const formData = $(this).serialize();
        const nonce = $(this).find('[name="nonce"]').val(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è "nonce"
        if (steamAuthAjax.debug) console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData, 'Nonce:', nonce);
    
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: formData + '&action=save_ticket_settings&nonce=' + nonce,
            success: function(response) {
                $spinner.hide();
                if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                if (response.success) {
                    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + (response.data || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                }
            },
            error: function(xhr, status, error) {
                $spinner.hide();
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error, xhr.responseText);
                showNotification('–û—à–∏–±–∫–∞ AJAX: ' + xhr.responseText, 'error');
            }
        });
    });

    $(document).on('change', '.ticket-status', function() {
        const ticketId = $(this).data('ticket-id');
        const status = $(this).val();
    
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'update_ticket_status',
                ticket_id: ticketId,
                status: status,
                nonce: steamAuthAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    showNotification('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω', 'success');
                    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "closed" –∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∏–∫–µ—Ç–∞
                    if (status === 'closed' && steamAuthAjax.ticket_auto_delete_days > 0) {
                        const $row = $(`tr:has(select[data-ticket-id="${ticketId}"])`);
                        const updatedAt = new Date().toISOString(); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç updated_at
                        const deleteDate = new Date(new Date(updatedAt).getTime() + steamAuthAjax.ticket_auto_delete_days * 24 * 60 * 60 * 1000).toLocaleString();
                        $row.find('.ticket-actions').append(`<span class="ticket-delete-notice">–ë—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω: ${deleteDate}</span>`);
                    }
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + (response.data || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                }
            },
            error: function() {
                showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
            }
        });
    });

    $(document).on('click', '.view-ticket', function(e) {
        e.preventDefault();
        const ticketId = $(this).data('ticket-id');
        if (steamAuthAjax.debug) console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–∫–µ—Ç–∞:', ticketId);
    
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'admin_view_ticket',
                ticket_id: ticketId,
                nonce: steamAuthAjax.nonce
            },
            success: function(response) {
                $('#ticket-modal-content').html(response);
                $('#ticket-modal').show();
    
                if (typeof tinymce !== 'undefined' && $('#reply-content').length) {
                    tinymce.remove('#reply-content');
                    tinymce.init({
                        selector: '#reply-content',
                        height: 200,
                        menubar: false,
                        plugins: 'lists link image paste quickbars',
                        toolbar: 'undo redo | bold italic | bullist numlist | link image',
                        quickbars_selection_toolbar: 'bold italic | quicklink',
                        quickbars_insert_toolbar: false,
                        quicktags: true,
                        setup: function(editor) {
                            editor.on('init', function() {
                                if (steamAuthAjax.debug) console.log('TinyMCE –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                            });
                        }
                    });
                }
                initAdminTicketModal(ticketId);
    
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç
                const $status = $('#ticket-modal-content p:contains("–°—Ç–∞—Ç—É—Å:")');
                const statusText = $status.text();
                if (statusText.includes('–ó–∞–∫—Ä—ã—Ç')) {
                    const days = steamAuthAjax.ticket_auto_delete_days || 0; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ steamAuthAjax
                    if (days > 0) {
                        const updatedAt = $('#ticket-modal-content p:contains("–û–±–Ω–æ–≤–ª–µ–Ω–æ:")').text().replace('–û–±–Ω–æ–≤–ª–µ–Ω–æ: ', '') || new Date().toISOString();
                        const deleteDate = new Date(new Date(updatedAt).getTime() + days * 24 * 60 * 60 * 1000).toLocaleString();
                        $status.after(`<p><strong>–ë—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω:</strong> ${deleteDate}</p>`);
                    }
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–∞:', status, error);
                showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–∞', 'error');
            }
        });
    });
    
    $(document).on('click', '.ticket-modal-close', function() {
        $('#ticket-modal').hide();
        if (typeof tinymce !== 'undefined') {
            tinymce.remove('#reply-content');
        }
    });

    $(document).on('click', function(event) {
        const $modal = $('#ticket-modal');
        if (event.target === $modal[0]) {
            $modal.hide();
        }
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å —Ç–∏–∫–µ—Ç–∞–º–∏
    function initTicketActions() {
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ <a>, —Ç–∞–∫ –∏ <button> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è
        $('.view-ticket').off('click').on('click', function(e) {
            e.preventDefault();
            const ticketId = $(this).data('ticket-id');
            if (steamAuthAjax.debug) console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–∫–µ—Ç–∞:', ticketId);
            $.post(steamAuthAjax.ajaxurl, {
                action: 'admin_view_ticket',
                ticket_id: ticketId,
                nonce: steamAuthAjax.nonce
            }, function(response) {
                $('#ticket-modal-content').html(response);
                $('#ticket-modal').show();
                initAdminTicketModal(ticketId);
            }).fail(function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–∞:', status, error);
                showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–∞', 'error');
            });
        });

        $('.delete-ticket').off('click').on('click', function(e) {
            e.preventDefault();
            const ticketId = $(this).data('ticket-id');
            showConfirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç #' + ticketId + '?', function(confirmed) {
                if (confirmed) {
                    $.post(steamAuthAjax.ajaxurl, {
                        action: 'admin_delete_ticket',
                        ticket_id: ticketId,
                        nonce: steamAuthAjax.nonce
                    }, function(response) {
                        if (response.success) {
                            showNotification('–¢–∏–∫–µ—Ç —É–¥–∞–ª—ë–Ω', 'success');
                            $(`tr:has([data-ticket-id="${ticketId}"])`).fadeOut(300, function() {
                                $(this).remove();
                                const totalMatch = $('h2').text().match(/\d+/);
                                if (totalMatch) {
                                    const total = parseInt(totalMatch[0]) - 1;
                                    $('h2').text(`–¢–∏–∫–µ—Ç—ã (${total})`);
                                }
                            });
                        } else {
                            showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                        }
                    }).fail(function(xhr, status, error) {
                        console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                        showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
                    });
                }
            });
        });

        $('.ticket-status').off('change').on('change', function() {
            const ticketId = $(this).data('ticket-id');
            const status = $(this).val();
            $.post(steamAuthAjax.ajaxurl, {
                action: 'update_ticket_status',
                ticket_id: ticketId,
                status: status,
                nonce: steamAuthAjax.nonce
            }, function(response) {
                if (response.success) {
                    showNotification('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω', 'success');
                    if (status === 'closed' && steamAuthAjax.ticket_auto_delete_days > 0) {
                        const $row = $(`tr:has(select[data-ticket-id="${ticketId}"])`);
                        const updatedAt = new Date().toISOString();
                        const deleteDate = new Date(new Date(updatedAt).getTime() + steamAuthAjax.ticket_auto_delete_days * 24 * 60 * 60 * 1000).toLocaleString();
                        $row.find('.ticket-actions, td:last-child').append(`<span class="ticket-delete-notice">–ë—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω: ${deleteDate}</span>`);
                    }
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
                }
            }).fail(function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
            });
        });
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –∞–¥–º–∏–Ω–∫–∏.
    const activeTab = $('.tab-link.active').data('tab');
    if (activeTab) {
        loadDashboardTab(activeTab);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    function loadDashboardTab(tab, paged = 1) {
        if (steamAuthAjax.debug) console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', tab, '–°—Ç—Ä–∞–Ω–∏—Ü–∞:', paged);
        const $content = $(`#${tab}-content`);
        $content.html('<span class="loading-spinner"></span> –ó–∞–≥—Ä—É–∑–∫–∞...');

        $.post(steamAuthAjax.ajaxurl, {
            action: 'steam_auth_load_dashboard_tab',
            tab: tab,
            paged: paged,
            nonce: steamAuthAjax.nonce
        }, function(response) {
            $content.html(response);
            if (tab === 'tickets') {
                initTicketActions();
            }
        }).fail(function(xhr, status, error) {
            console.error('–û—à–∏–±–∫–∞ AJAX:', status, error, xhr.responseText);
            $content.html('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏: ' + xhr.responseText);
        });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –≤ –¥–∞—à–±–æ—Ä–¥–µ
    $(document).on('click', '.tab-link', function(e) {
        e.preventDefault();
        const tabId = $(this).data('tab');
        if (steamAuthAjax.debug) console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤ –¥–∞—à–±–æ—Ä–¥–µ:', tabId);

        $('.tab-link').removeClass('active');
        $('.tab-content').removeClass('active');
        $(this).addClass('active');
        $(`#${tabId}`).addClass('active');

        if ($('#steam-admin-dashboard').length) {
            loadDashboardTab(tabId); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        }
    });

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –¥–∞—à–±–æ—Ä–¥–µ
    $(document).on('click', '#steam-admin-dashboard .tablenav-pages a', function(e) {
        e.preventDefault();
        const href = $(this).attr('href');
        const paged = href.match(/paged=(\d+)/) ? parseInt(RegExp.$1) : 1;
        loadDashboardTab('tickets', paged);
    });

    function initAdminTicketModal(ticketId) {
        const $replyForm = $('#admin-ticket-reply-form');
        if ($replyForm.length) {
            $replyForm.off('submit').on('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                formData.append('action', 'admin_reply_ticket');
                formData.append('ticket_id', ticketId);
                formData.append('nonce', steamAuthAjax.nonce);

                $.ajax({
                    url: steamAuthAjax.ajaxurl,
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        if (response.success) {
                            showNotification('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'success');
                            $('#ticket-modal').hide();
                            if ($('#steam-admin-dashboard').length) {
                                loadDashboardTab('tickets'); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –≤ –¥–∞—à–±–æ—Ä–¥–µ
                            } else {
                                loadTab('tickets'); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –≤ –∞–¥–º–∏–Ω–∫–µ
                            }
                        } else {
                            showNotification('–û—à–∏–±–∫–∞: ' + (response.data || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                        }
                    },
                    error: function() {
                        showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
                    }
                });
            });
        }
    }

    $(document).on('click', '.action-btn', function(e) {
        e.preventDefault();
        const ticketId = $('#ticket-modal-content .admin-ticket-h3').text().match(/#(\d+)/)[1];
        const status = $(this).data('action');
        if (steamAuthAjax.debug) console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞:', ticketId, status);
    
        $.ajax({
            url: steamAuthAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'update_ticket_status',
                ticket_id: ticketId,
                status: status,
                nonce: steamAuthAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    showNotification('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω', 'success');
                    $('#ticket-modal').hide();
                    if ($('#steam-admin-dashboard').length) {
                        loadDashboardTab('tickets');
                    } else {
                        loadTab('tickets');
                    }
                } else {
                    showNotification('–û—à–∏–±–∫–∞: ' + (response.data || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                }
            },
            error: function(xhr, status, error) {
                console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
            }
        });
    });

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –¥–∞—à–±–æ—Ä–¥–µ
    $(document).on('click', '#steam-admin-dashboard .tablenav-pages a', function(e) {
        e.preventDefault();
        const href = $(this).attr('href');
        const paged = href.match(/paged=(\d+)/) ? parseInt(RegExp.$1) : 1;
        loadDashboardTab('tickets', paged);
    });

    $(document).on('click', '.delete-ticket', function(e) {
        e.preventDefault();
        const ticketId = $(this).data('ticket-id');
        if (steamAuthAjax.debug) console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞:', ticketId);
    
        showConfirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç #' + ticketId + '?', function(confirmed) {
            if (confirmed) {
                $.ajax({
                    url: steamAuthAjax.ajaxurl,
                    type: 'POST',
                    data: {
                        action: 'admin_delete_ticket',
                        ticket_id: ticketId,
                        nonce: steamAuthAjax.nonce
                    },
                    success: function(response) {
                        if (steamAuthAjax.debug) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                        if (response.success) {
                            showNotification('–¢–∏–∫–µ—Ç —É–¥–∞–ª—ë–Ω', 'success');
                            $(`tr:has(a[data-ticket-id="${ticketId}"])`).fadeOut(300, function() {
                                $(this).remove();
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–∏–∫–µ—Ç–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                                const total = parseInt($('h2').text().match(/\d+/)[0]) - 1;
                                $('h2').text(`–¢–∏–∫–µ—Ç—ã (${total})`);
                            });
                        } else {
                            showNotification('–û—à–∏–±–∫–∞: ' + (response.data || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('–û—à–∏–±–∫–∞ AJAX:', status, error);
                        showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
                    }
                });
            }
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º –≤ –∞–¥–º–∏–Ω–∫–µ (–ø—Ä–∏–º–µ—Ä –¥–ª—è ticket-topics-form –∏ ticket-settings-form)
    $('#ticket-topics-form').on('submit', function(e) {
        e.preventDefault();
        const formData = $(this).serialize();
        $.post(steamAuthAjax.ajaxurl, formData + '&action=save_ticket_topics', function(response) {
            if (response.success) {
                showNotification('–¢–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
            } else {
                showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
            }
        }).fail(function() {
            showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
        });
    });

    $('#ticket-settings-form').on('submit', function(e) {
        e.preventDefault();
        const formData = $(this).serialize();
        $.post(steamAuthAjax.ajaxurl, formData + '&action=save_ticket_settings', function(response) {
            if (response.success) {
                showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
            } else {
                showNotification('–û—à–∏–±–∫–∞: ' + response.data, 'error');
            }
        }).fail(function() {
            showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
        });
    });
    
    function initAdminTicketModal(ticketId) {
        const $replyForm = $('#admin-ticket-reply-form');
        if ($replyForm.length) {
            $replyForm.off('submit').on('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                formData.append('action', 'admin_reply_ticket');
                formData.append('ticket_id', ticketId);
                formData.append('nonce', steamAuthAjax.nonce);
                formData.append('note', $('#ticket-note').val());
    
                $.ajax({
                    url: steamAuthAjax.ajaxurl,
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        if (response.success) {
                            showNotification('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'success');
                            $('#ticket-modal').hide();
                            if ($('#steam-admin-dashboard').length) {
                                loadDashboardTab('tickets');
                            } else {
                                loadTab('tickets');
                            }
                        } else {
                            showNotification('–û—à–∏–±–∫–∞: ' + (response.data || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                        }
                    },
                    error: function() {
                        showNotification('–û—à–∏–±–∫–∞ AJAX', 'error');
                    }
                });
            });
        }
    
        // –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
        $('#quick-reply').off('change').on('change', function() {
            const value = $(this).val();
            if (value && typeof tinymce !== 'undefined' && tinymce.get('reply-content')) {
                tinymce.get('reply-content').setContent(value);
                if (steamAuthAjax.debug) console.log('–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏–º–µ–Ω—ë–Ω:', value);
            } else if (value) {
                $('#reply-content').val(value);
                if (steamAuthAjax.debug) console.log('TinyMCE –Ω–µ –≥–æ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:', value);
            }
        });

        // // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º
        // const $themeSelect = $('<select id="ticket-theme" style="position: absolute; top: 10px; right: 50px;"><option value="default">–°—Ç–∞–Ω–¥–∞—Ä—Ç</option><option value="theme-open">–û—Ç–∫—Ä—ã—Ç</option><option value="theme-in_progress">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</option><option value="theme-closed">–ó–∞–∫—Ä—ã—Ç</option></select>');
        // $('.ticket-modal-header').append($themeSelect);
        // $themeSelect.val('theme-' + $('.ticket-status').text().toLowerCase().replace(' ', '_'));
        // $themeSelect.on('change', function() {
        //     $('#ticket-modal-content').removeClass('theme-open theme-in_progress theme-closed').addClass($(this).val());
        // });

        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∏–∫–µ—Ç
        // $('.copy-ticket-link').on('click', function() {
        //     const ticketId = $(this).data('ticket-id');
        //     const url = `${steamAuthAjax.home_url}/auth/admin.php?page=steam-auth-tickets&ticket_id=${ticketId}`;
        //     navigator.clipboard.writeText(url).then(() => {
        //         showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
        //     }).catch(() => {
        //         showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
        //     });
        // });

        // –¢–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è
        const $timer = $('.ticket-timer');
        if ($timer.length) {
            const deleteTime = $timer.data('delete-timestamp') * 1000;
            setInterval(() => {
                const now = Date.now();
                const timeLeft = deleteTime - now;
                if (timeLeft <= 0) {
                    $timer.text('–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç');
                } else {
                    const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                    const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                    $timer.text(`–£–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑: ${days}–¥ ${hours}—á ${minutes}–º`);
                }
            }, 1000);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if ($('#steam-admin-dashboard').length) {
        initTicketActions(); // –î–ª—è –¥–∞—à–±–æ—Ä–¥–∞, –µ—Å–ª–∏ —Ç–∏–∫–µ—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    } else {
        loadTab('general'); // –î–ª—è –∞–¥–º–∏–Ω–∫–∏
    }
});